/*  * Copyright 2016 Matthew J. Dovey (www.ceridwen.com). * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.ceridwen.badgeserver;import java.io.IOException;import java.util.logging.Level;import java.util.logging.Logger;import javax.servlet.RequestDispatcher;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang3.StringUtils;/** * * @author Matthew */public abstract class AbstractBadgeServlet extends HttpServlet {  /**   * Processes requests for both HTTP <code>GET</code> and <code>POST</code>   * methods.   *   * @param request servlet request   * @param response servlet response   * @throws ServletException if a servlet-specific error occurs   * @throws IOException if an I/O error occurs   */  protected void processRequest(HttpServletRequest request, HttpServletResponse response)          throws ServletException, IOException {    BadgeData data = this.getBadgeData(request);    request.setAttribute("data", data);        String style;    switch (StringUtils.defaultString(request.getParameter("style"))) {      case "plastic":        style = "plastic";         break;      case "flat":      default:        style = "flat";        break;    }    RequestDispatcher requestDispatcher = request.getRequestDispatcher("/WEB-INF/templates/" + data.getTemplate() + "-" + style + ".jsp");    requestDispatcher.forward(request, response);   }  // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">  /**   * Handles the HTTP <code>GET</code> method.   *   * @param request servlet request   * @param response servlet response   * @throws ServletException if a servlet-specific error occurs   * @throws IOException if an I/O error occurs   */  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)          throws ServletException, IOException {    try {      processRequest(request, response);    } catch (ServletException | IOException ex) {      Logger.getLogger(AbstractBadgeServlet.class.getName()).log(Level.SEVERE, null, ex);    }  }  /**   * Handles the HTTP <code>POST</code> method.   *   * @param request servlet request   * @param response servlet response   * @throws ServletException if a servlet-specific error occurs   * @throws IOException if an I/O error occurs   */  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)          throws ServletException, IOException {    try {      processRequest(request, response);    } catch (ServletException | IOException ex) {      Logger.getLogger(AbstractBadgeServlet.class.getName()).log(Level.SEVERE, null, ex);    }  }  /**   * Returns a short description of the servlet.   *   * @return a String containing servlet description   */  @Override  public String getServletInfo() {    return "Short description";  }// </editor-fold>  protected abstract BadgeData getBadgeData(HttpServletRequest request);}